/*!
 * Copyright 2014 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { DeleteCallback, Metadata, ServiceObject } from '@google-cloud/common';
import { ResourceStream } from '@google-cloud/paginator';
import { Duplex } from 'stream';
import { BigQuery, PagedCallback, PagedRequest, PagedResponse, Query, QueryRowsResponse, ResourceCallback, SimpleQueryRowsCallback } from './bigquery';
import { JobCallback, JobResponse, Table, TableMetadata, TableOptions } from './table';
import { Model } from './model';
import { Routine } from './routine';
import bigquery from './types';
export interface DatasetDeleteOptions {
    force?: boolean;
}
export interface DatasetOptions {
    location?: string;
}
export declare type CreateDatasetOptions = bigquery.IDataset;
export declare type GetModelsOptions = PagedRequest<bigquery.models.IListParams>;
export declare type GetModelsResponse = PagedResponse<Model, GetModelsOptions, bigquery.IListModelsResponse>;
export declare type GetModelsCallback = PagedCallback<Model, GetModelsOptions, bigquery.IListModelsResponse>;
export declare type GetRoutinesOptions = PagedRequest<bigquery.routines.IListParams>;
export declare type GetRoutinesResponse = PagedResponse<Routine, GetRoutinesOptions, bigquery.IListRoutinesResponse>;
export declare type GetRoutinesCallback = PagedCallback<Routine, GetRoutinesOptions, bigquery.IListRoutinesResponse>;
export declare type GetTablesOptions = PagedRequest<bigquery.tables.IListParams>;
export declare type GetTablesResponse = PagedResponse<Table, GetTablesOptions, bigquery.ITableList>;
export declare type GetTablesCallback = PagedCallback<Table, GetTablesOptions, bigquery.ITableList>;
export declare type RoutineMetadata = bigquery.IRoutine;
export declare type RoutineResponse = [Routine, bigquery.IRoutine];
export declare type RoutineCallback = ResourceCallback<Routine, bigquery.IRoutine>;
export declare type TableResponse = [Table, bigquery.ITable];
export declare type TableCallback = ResourceCallback<Table, bigquery.ITable>;
/**
 * Interact with your BigQuery dataset. Create a Dataset instance with
 * {@link BigQuery#createDataset} or {@link BigQuery#dataset}.
 *
 * @class
 * @param {BigQuery} bigQuery {@link BigQuery} instance.
 * @param {string} id The ID of the Dataset.
 * @param {object} [options] Dataset options.
 * @param {string} [options.location] The geographic location of the dataset.
 *      Defaults to US.
 *
 * @example
 * const {BigQuery} = require('@google-cloud/bigquery');
 * const bigquery = new BigQuery();
 * const dataset = bigquery.dataset('institutions');
 */
declare class Dataset extends ServiceObject {
    bigQuery: BigQuery;
    location?: string;
    getModelsStream: (options?: GetModelsOptions) => ResourceStream<Model>;
    getRoutinesStream: (options?: GetRoutinesOptions) => ResourceStream<Routine>;
    getTablesStream: (options?: GetTablesOptions) => ResourceStream<Table>;
    constructor(bigQuery: BigQuery, id: string, options?: DatasetOptions);
    createQueryJob(options: string | Query): Promise<JobResponse>;
    createQueryJob(options: string | Query, callback: JobCallback): void;
    /**
     * Run a query scoped to your dataset as a readable object stream.
     *
     * See {@link BigQuery#createQueryStream} for full documentation of this
     * method.
     *
     * @param {object} options See {@link BigQuery#createQueryStream} for full
     *     documentation of this method.
     * @returns {stream}
     */
    createQueryStream(options: Query | string): Duplex;
    createRoutine(id: string, config: RoutineMetadata): Promise<RoutineResponse>;
    createRoutine(id: string, config: RoutineMetadata, callback: RoutineCallback): void;
    createTable(id: string, options: TableMetadata): Promise<TableResponse>;
    createTable(id: string, options: TableMetadata, callback: TableCallback): void;
    createTable(id: string, callback: TableCallback): void;
    delete(options?: DatasetDeleteOptions): Promise<[Metadata]>;
    delete(options: DatasetDeleteOptions, callback: DeleteCallback): void;
    delete(callback: DeleteCallback): void;
    getModels(options?: GetModelsOptions): Promise<GetModelsResponse>;
    getModels(options: GetModelsOptions, callback: GetModelsCallback): void;
    getModels(callback: GetModelsCallback): void;
    getRoutines(options?: GetRoutinesOptions): Promise<GetRoutinesResponse>;
    getRoutines(options: GetRoutinesOptions, callback: GetRoutinesCallback): void;
    getRoutines(callback: GetRoutinesCallback): void;
    getTables(options?: GetTablesOptions): Promise<GetTablesResponse>;
    getTables(options: GetTablesOptions, callback: GetTablesCallback): void;
    getTables(callback: GetTablesCallback): void;
    /**
     * Create a {@link Model} object.
     *
     * @throws {TypeError} if model ID is missing.
     *
     * @param {string} id The ID of the model.
     * @return {Model}
     *
     * @example
     * const {BigQuery} = require('@google-cloud/bigquery');
     * const bigquery = new BigQuery();
     * const dataset = bigquery.dataset('institutions');
     *
     * const model = dataset.model('my-model');
     */
    model(id: string): Model;
    query(options: Query): Promise<QueryRowsResponse>;
    query(options: Query, callback: SimpleQueryRowsCallback): void;
    /**
     * Create a {@link Routine} object.
     *
     * @throws {TypeError} if routine ID is missing.
     *
     * @param {string} id The ID of the routine.
     * @returns {Routine}
     *
     * @example
     * const {BigQuery} = require('@google-cloud/bigquery');
     * const bigquery = new BigQuery();
     * const dataset = bigquery.dataset('institutions');
     *
     * const routine = dataset.routine('my_routine');
     */
    routine(id: string): Routine;
    /**
     * Create a {@link Table} object.
     *
     * @throws {TypeError} if table ID is missing.
     *
     * @param {string} id The ID of the table.
     * @param {object} [options] Table options.
     * @param {string} [options.location] The geographic location of the table, by
     *      default this value is inherited from the dataset. This can be used to
     *      configure the location of all jobs created through a table instance.
     * It cannot be used to set the actual location of the table. This value will
     *      be superseded by any API responses containing location data for the
     *      table.
     * @return {Table}
     *
     * @example
     * const {BigQuery} = require('@google-cloud/bigquery');
     * const bigquery = new BigQuery();
     * const dataset = bigquery.dataset('institutions');
     *
     * const institutions = dataset.table('institution_data');
     */
    table(id: string, options?: TableOptions): Table;
}
/**
 * Reference to the {@link Dataset} class.
 * @name module:@google-cloud/bigquery.Dataset
 * @see Dataset
 */
export { Dataset };
